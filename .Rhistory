} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
combinations <- expand.grid(rep(list(ar),2))
View(combinations)
combinations[[1]][1]
round(4.5)
(combinations[[1]][1] + combinations[[2]][2])/k
(combinations[[1]][1] + combinations[[2]][2])/k %% 1
5/5 %% 1
(5/5) %% 1
(4/5) %% 1
4/5
4/5
(10/10) %% 1
(25/5) %% 1
(25/23) %% 1
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if ((combinations[[1]][i] + combinations[[2]][i])/k %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][i] + combinations[[2]][i])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][i] + combinations[[2]][i])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
(25/5) %% 1
(combinations[[1]][2] + combinations[[2]][4])
((combinations[[1]][2] + combinations[[2]][4])/k)
((combinations[[1]][2] + combinations[[2]][4])/k) %% 1
((combinations[[1]][2] + combinations[[2]][4])/k) %% 1 == 0
combinations <- expand.grid(rep(list(ar),2))
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][i] + combinations[[2]][i])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
combinations <- expand.grid(rep(list(ar),2))
nrow(combinations)
combinations[[2]][10000]
combinations[[1]][10000] + combinations[[2]][10000]
combinations[[1]][10000] + combinations[[2]][10000])/k
(combinations[[1]][10000] + combinations[[2]][10000])/k
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
(combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
((combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1
View(combinations)
View(combinations)
library(tidyverse)
combinations[[1]][0]
lapply(combinations, as.integer)
combinations <- lapply(combinations, as.integer)
combinations <- expand.grid(rep(list(ar),2))
combinations <- lapply(combinations, as.integer)
combinations <- data.frame(lapply(combinations, as.integer))
View(combinations)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
combinations <- data.frame(lapply(combinations, as.integer))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
n = 100
k = 22
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][10000] + combinations[[2]][10000])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
combinations <- data.frame(lapply(combinations, as.integer))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
if (((combinations[[1]][i] + combinations[[2]][i])/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
combinations[[1]][1] < combinations[[2]][1]
index_i <- combinations[[1]][1]
index_i
ar[index_i]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
index_j <- combinations[[2]][i]
ar_j <- ar[index_j]
ar_j
ar_i
(ar_i+ar_j)/k
(ar_i+ar_j)/k %% 1
((ar_i+ar_j)/k) %% 1
((ar_i+ar_j)/k) %% 1 == 0
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
if (((ar_i+ar_j)/k) %% 1 == 0){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
combinations <- expand.grid(rep(list(ar),2))
View(combinations)
ar[[index_i]]
ar[index_i]
ar_i <- ar[index_i]
ar_i
ar_j <- ar[index_j]
ar_j
index_j <- combinations[[2]][3]
index_i <- combinations[[1]][3]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
(ar_i+ar_j)
((ar_i+ar_j)/k
((ar_i+ar_j)/k)
((ar_i+ar_j)/k)
((ar_i+ar_j)/k)
((ar_i+ar_j)/k)
ar_i+ar_j
ar_i+ar_j
ar_i+ar_j
(ar_i+ar_j)/k
((ar_i+ar_j)/k)
((ar_i+ar_j)/k) %% 1
((ar_i+ar_j)/k) %% 1 == 0
(ar_i+ar_j)/k
round((ar_i+ar_j)/k)
(ar_i+ar_j)/k == round((ar_i+ar_j)/k)
n = 100
k = 22
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][3]
index_j <- combinations[[2]][3]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
combination$pair_i <- ar_i
combination$pair_j <- ar_j
combinations$sum <- ar_i+ar_j
# if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
#   count <- count+1
# } else {}
} else{}
}
#print(count)
}
divisibleSumPairs(n,k,ar)
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]
ar_j <- ar[index_j]
combination$pair_i <- ar_i
combination$pair_j <- ar_j
combinations$sum <- ar_i+ar_j
# if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
#   count <- count+1
# } else {}
} else{}
}
#print(count)
}
divisibleSumPairs(n,k,ar)
ar <- c(1, 3, 2, 6, 1, 2)
combinations <- expand.grid(rep(list(ar),2))
combinations %>% filter(Var1<var2)
combinations <- expand.grid(rep(list(ar),2))
combinations
combinations %>% filter(Var1<Var2)
valid <- combinations %>% filter(Var1<Var2)
3+6
ar[7]
ar <- c(1, 3, 2, 6, 1, 2)
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]+1
ar_j <- ar[index_j]+1
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i]+1
ar_j <- ar[index_j]+1
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
combinations <- expand.grid(rep(list(ar),2))
count <- 0
nrow(combinations)
View(valid)
combinations[[1]][7] < combinations[[2]][7]
index_i <- combinations[[1]][7]
index_j <- combinations[[2]][7]
index_j
index_i
ar_i <- ar[index_i]+1
ar_i
ar_j <- ar[index_j]+1
ar_j
ar_i+ar_j
(ar_i+ar_j)/k
ar_j
ar[index_j]
index_i <- combinations[[1]][7]
index_i
index_j <- combinations[[2]][7]
index_j
ar[index_i]+1
ar_i <- ar[index_i+1]
ar_i
ar_j <- ar[index_j+1]
ar_j
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][7] < combinations[[2]][7]){
index_i <- combinations[[1]][7]
index_j <- combinations[[2]][7]
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
ar_j
ar_i
(ar_i+ar_j)
(ar_i+ar_j)/k
k=3
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][7] < combinations[[2]][7]){
index_i <- combinations[[1]][7]
index_j <- combinations[[2]][7]
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
ar_i <- ar[index_i+1]
ar_i
ar_j <- ar[index_j+1]
ar_j <- ar[index_j+1]
ar_j
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
divisibleSumPairs(n,k,ar)
index_j <- combinations[[2]][23]
index_i <- combinations[[1]][23]
index_i
index_j
ar_i <- ar[index_i+1]
ar_i
ar_j <- ar[index_j+1]
ar_j
(ar_i+ar_j)
ar_j <- ar[index_j+1]
ar_j <- gsub(NA,0,ar_j)
ar_j
ar_j <- gsub("NA",0,ar_j)
ar_j
ar_j <- ar[index_j+1]
ar_j <- gsub("NA",0,ar_j)
ar_j <- gsub("NA","0",ar_j)
ar_j <- gsub(NA,"0",ar_j)
ar_j <- as.numeric(ar[index_j+1])
ar_j
ar_j <- ar[index_j+1]
is.na(ar_j)
ar_j[is.na(ar_j)]
ar_j[is.na(ar_j)] <- 0
ar_i[is.na(ar_i)] <- 0
ar_i
(ar_i+ar_j)/k
(ar_i+ar_j)/k == round((ar_i+ar_j)/k)
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
ar_i[is.na(ar_i)] <- 0
ar_j[is.na(ar_j)] <- 0
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
ar = array(c(43,95,51,55,40,86,65,81,51,20,47,50,65,53,23,78,75,75,47,73,25,27,14,8,26,58,95,28,3,23,48,69,26,3,73,52,34,7,40,33,56,98,71,29,70,71,28,12,18,49,19,25,2,18,15,41,51,42,46,19,98,56,54,98,72,25,16,49,34,99,48,93,64,44,50,91,44,17,63,27,3,65,75,19,68,30,43,37,72,54,82,92,37,52,72,62,3,88,82,71))
k = 22
divisibleSumPairs <- function(n, k, ar) {
combinations <- expand.grid(rep(list(ar),2))
count <- 0
for (i in 1:nrow(combinations)) {
if (combinations[[1]][i] < combinations[[2]][i]){
index_i <- combinations[[1]][i]
index_j <- combinations[[2]][i]
ar_i <- ar[index_i+1]
ar_j <- ar[index_j+1]
ar_i[is.na(ar_i)] <- 0
ar_j[is.na(ar_j)] <- 0
if ((ar_i+ar_j)/k == round((ar_i+ar_j)/k)){
count <- count+1
} else {}
} else{}
}
print(count)
}
divisibleSumPairs(n,k,ar)
install.packages("installr")
library(installr)
updateR()
gc()
print("hello world")
paste("whatever","whatever","this works")
data.frame(c(1,2,3,4,5))
data.frame(name = c(1,2,3,4,5))
data.frame(name = c(1,2,3,4,5),another = c("asdas","2","4","asda","5"))
shiny::runApp('~/GitHub/inflation_calculator')
runApp('~/GitHub/inflation_calculator')
1.131*1.056*1.016*1.038*1.031*1.040
runApp('~/GitHub/inflation_calculator')
1.131*1.056*1.016*1.038*1.031*1.040*1.057*1.067*1.036*1.019*1.024*1.037
runApp('~/GitHub/inflation_calculator')
runApp('~/GitHub/inflation_calculator')
library(rsconnect)
deployApp()
setwd("C:/Users/usuario/Documents/GitHub/inflation_calculator")
deployApp()
